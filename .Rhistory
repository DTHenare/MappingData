install.packages(pwr)
install.packages("pwr")
library(pwr)
pwr.anova.test(k=5,f=.25,sig.level=.05,power=.8)
pwr.anova.test(k=4,f=.25,sig.level=.05,power=.8)
pwr.t.test(d=0.2,sig.level = 0.05,power = 0.8, type = c("paired"))
pwr.t.test(d=0.5,sig.level = 0.05,power = 0.8, type = c("paired"))
pwr.t.test(d=0.8,sig.level = 0.05,power = 0.8, type = c("paired"))
pwr.anova.test(k=4,f=0.201274415,sig.level=.05,power=.8)
library(pwr)
pwr.anova.test(k=4,f=0.201274415,sig.level=.05,power=.8)
pwr.anova.test(k=4,f=0.201274415,sig.level=.05,power=.5)
1+2*3
x=6
x
x
total.revenue=18.4
expenses=x
x=5
x=6
net.profit=total.revenue-expenses
net.profit
z=c(2,3,4,5,6)
z(1)
z[1]
z[0]
mean(z)
var(z)
sd(z)
sqrt(var(z))
seq(from=.1, to=.9,by=.1)
seq(1,10)
seq(1,10,5)
trees
help(trees)
attach(trees)
names(trees)
hist(Girth)
plot(Girth,Height)
pairs(trees)
summary(trees)
likelihood=function(n,y,theta){return(theta^y*(1-theta)^(n-y))}
theta=sequence(0.01,.99,.01)
plot(theta,likelihood(400,72,theta))
theta=seq(0.01,.99,.01)
plot(theta,likelihood(400,72,theta))
72/400
abline(v=.18)
loglike=function(n,y,theta){return(y*log(theta)+(n-y)*log(1-theta))}
plot(theta,loglike(400,72,theta = ))
plot(theta,loglike(400,72,theta))
abline(v=.18)
plot(theta,loglike(400,72,theta),type="l")
qnorm(p=0.975,mean=0,sd=1)
install.packages("Quandl")
mydata = Quandl("FRED/GDP")
library(Quandl)
mydata = Quandl("FRED/GDP")
Quandl.api_key("AsUzCTxrs6_FQtfswu6f")
mydata = Quandl("DEXUSAL")
mydata = Quandl("http://www.quandl.com/api/v3/datasets/FRED/DEXUSAL")
mydata = Quandl("FRED/DEXUSAL")
View(mydata)
View(mydata)
mydata = Quandl("BOE/XUDLADD")
plot.ts(mydata)
library(maptools)
library(RColorBrewer)
library(classInt)
setwd("C:/Users/Dion/Documents/MappingData/")
## General Roll -------------------------------------------------
#Load general electorate boundaries
Gboundaries <- readShapePoly("GED Final 20140318_region.shp")
# Importing vote information ===================================
#Import csv file which holds colour coding values
fileData <- read.csv("VotesForRegPartyByElectorate.csv",skip = 1,encoding = "UTF-8")
#Convert electorate names to latin1 encoding
fileData$X<- iconv(fileData$X,"UTF-8" ,"latin1")
fileData$index <- match(fileData$X,Gboundaries$name)
#Select the party you wish to plot
partyName="NATIONAL.PARTY"
orderedVotes <- numeric(64)
for (electorate in 1:length(fileData$index)){
if (is.na(fileData$index[electorate])){
} else {
partyVotes <- eval(parse(text = paste0("fileData$",partyName,"[electorate]")))
totalVotes <- fileData$Total.Valid.Party.Votes[electorate]
#Assign %votes to correct row of orderedVotes for mapping
orderedVotes[fileData$index[electorate]]=partyVotes/totalVotes*100
}
}
# Perform colour coding and plot general electorate map ========
GcolourValues <- orderedVotes
#Attach colour values to boundaries
Gboundaries$cValue = GcolourValues
#select color palette and the number colors to represent on the map
colors <- brewer.pal(5, "Blues") #set breaks for the 9 colors
brks<-classIntervals(Gboundaries$cValue, n=5, style="quantile")
brks<- brks$brks #plot the map
brks <- c(10,20,30,40,50,60)
plot(Gboundaries, col=colors[findInterval(Gboundaries$cValue, brks,all.inside=TRUE)], axes=F)
## Maori Roll ----------------------------------------------------
#Load Maori electorate boundaries
Mboundaries <- readShapePoly("MED Final 20140226_region.shp")
#Create Values that will be used for colour coding
McolourValues <- 1:7
#Attach colour values to boundaries
Mboundaries$cValue = McolourValues
#select color palette and the number colors to represent on the map
colors <- brewer.pal(7, "YlOrRd") #set breaks for the 9 colors
brks<-classIntervals(Mboundaries$cValue, n=7, style="quantile")
brks<- brks$brks #plot the map
plot(Mboundaries, col=colors[findInterval(Mboundaries$cValue, brks,all.inside=TRUE)], axes=F)
